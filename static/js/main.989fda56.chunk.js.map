{"version":3,"sources":["types/IngredientType.ts","types/RecipeType.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["IngredientType","name","amount","unit","this","unitConversions","useMetricUnits","unitToAbbreviation","Map","cups","grams","toNearestFraction","get","x","whole","Math","trunc","part","fraction","ingredient","RecipeType","title","description","ingredients","directions","recipe","map","every","Ingredient","getAmount","Recipe","recipeName","useState","setRecipe","setUnitConversions","localStorage","getItem","toString","setUseMetricUnits","errorMessage","setErrorMessage","useEffect","setItem","fetch","then","response","text","data","YAML","parse","Error","catch","error","message","Alert","variant","Card","Title","as","ButtonGroup","toggle","ToggleButton","type","value","checked","onChange","Text","Header","Body","ListGroup","index","Item","key","step","Home","recipeList","setRecipeList","to","About","Link","href","BadURL","Loading","Spinner","animation","role","className","App","Nav","defaultActiveKey","path","exact","component","props","match","params","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.989fda56.chunk.js","sourcesContent":["export class IngredientType {\n  readonly name: string;\n  private amount: number;\n  private unit?: string;\n\n  constructor(name: string, amount: number, unit?: string) {\n    this.name = name;\n    this.amount = amount;\n    this.unit = unit;\n  }\n\n  static get(ingredient: any): IngredientType | null {\n    const isValid = (\n      ('name' in ingredient) && (typeof ingredient.name == 'string')\n      && ('amount' in ingredient) && (typeof ingredient.amount == 'number')\n      && (!('unit' in ingredient) || (typeof ingredient.unit == 'string'))\n    );\n    return (\n      isValid ? new IngredientType(ingredient.name,\n        ingredient.amount,\n        ingredient.unit)\n        : null\n    );\n  }\n\n  getAmount(unitConversions: any, useMetricUnits: boolean): string {\n    const unitToAbbreviation: Map<string, string> = new Map([\n      ['grams', 'g'],\n      ['tablespoons', 'tbsp.'],\n      ['teaspoons', 'tsp.'],\n      ['ounces', 'oz'],\n    ]);\n\n    if (!this.unit) {\n      return this.toNearestFraction(this.amount);\n    } else {\n      var amount = this.amount;\n      var unit = this.unit;\n      if (this.name in unitConversions) {\n        const { cups, grams } = unitConversions[this.name];\n        if (useMetricUnits && unit === 'cups') {\n          amount = amount * grams / cups;\n          unit = 'grams';\n        } else if (!useMetricUnits && unit === 'grams') {\n          amount = amount * cups / grams;\n          unit = 'cups';\n        }\n      }\n      return `${this.toNearestFraction(amount)} ${unitToAbbreviation.get(unit) || unit}`;\n    }\n  }\n\n  private toNearestFraction(x: number): string {\n    const epsilon = 0.001;\n    const whole = Math.trunc(x + epsilon);\n    const part = x - whole;\n    const fraction = (part < (1 / 8) / 2) ? null\n      : (part < 1 / 8 + (1 / 4 - 1 / 8) / 2) ? '1/8'\n        : (part < 1 / 4 + (1 / 3 - 1 / 4) / 2) ? '1/4'\n          : (part < 1 / 3 + (3 / 8 - 1 / 3) / 2) ? '1/3'\n            : (part < 3 / 8 + (1 / 2 - 3 / 8) / 2) ? '3/8'\n              : (part < 1 / 2 + (5 / 8 - 1 / 2) / 2) ? '1/2'\n                : (part < 5 / 8 + (2 / 3 - 5 / 8) / 2) ? '5/8'\n                  : (part < 2 / 3 + (3 / 4 - 2 / 3) / 2) ? '2/3'\n                    : (part < 3 / 4 + (7 / 8 - 3 / 4) / 2) ? '3/4'\n                      : '7/8';\n    return whole === 0 ? (fraction ? fraction : '0')\n      : `${whole}` + (fraction ? ` ${fraction}` : '');\n  };\n}\n","import { IngredientType } from './IngredientType';\n\nexport class RecipeType {\n    readonly title: string;\n    readonly description: string;\n    readonly ingredients: IngredientType[];\n    readonly directions: string[];\n\n    constructor(title: string, description: string, ingredients: IngredientType[], directions: string[]) {\n        this.title = title;\n        this.description = description;\n        this.ingredients = ingredients;\n        this.directions = directions;\n    }\n\n    static get(recipe: any): RecipeType | null {\n        const ingredients = recipe.ingredients?.map((ingredient: any) =>\n            IngredientType.get(ingredient)\n        );\n        const isValid = (\n            ('title' in recipe)\n            && ('description' in recipe)\n            && ingredients?.every((ingredient?: IngredientType) => ingredient)\n            && ('directions' in recipe)\n        );\n        return (\n            isValid ? new RecipeType(recipe.title,\n                recipe.description,\n                ingredients!,\n                recipe.directions)\n                : null\n        );\n    }\n}","import React, { useEffect, useState } from 'react';\nimport { Alert, ButtonGroup, Card, ListGroup, Nav, Spinner, ToggleButton } from 'react-bootstrap';\nimport { BrowserRouter, Link, Route, Switch } from 'react-router-dom';\nimport YAML from 'yaml';\nimport { IngredientType } from './types/IngredientType';\nimport { RecipeType } from './types/RecipeType';\n\nconst Ingredient: React.FC<{ingredient: IngredientType,\n                            unitConversions: any,\n                            useMetricUnits: boolean}> = ({ingredient,\n                                                          unitConversions,\n                                                          useMetricUnits}) => {\n  return (\n    <div>\n      {ingredient.getAmount(unitConversions, useMetricUnits)} {ingredient.name}\n    </div>\n  );\n};\n\nconst Recipe: React.FC<{recipeName: string}> = ({recipeName}) => {\n  const [recipe, setRecipe] = useState<RecipeType>();\n  const [unitConversions, setUnitConversions] = useState<any>();\n  const [useMetricUnits, setUseMetricUnits] = useState<boolean>(() =>\n    localStorage.getItem('useMetricUnit') === true.toString()\n  );\n  const [errorMessage, setErrorMessage] = useState<string>();\n\n  useEffect(() => {\n    if (!(localStorage.getItem('useMetricUnit') === useMetricUnits.toString())) {\n      localStorage.setItem('useMetricUnit', useMetricUnits.toString());\n    }\n  }, [useMetricUnits]);\n\n  useEffect(() => {\n    fetch(process.env.PUBLIC_URL + '../recipes/' + recipeName + '.yaml')\n      .then(response => response.text())\n      .then(data => {\n        const recipe = RecipeType.get(YAML.parse(data));\n        if (recipe) {\n          setRecipe(recipe)\n        } else {\n          throw new Error(\"Unable to parse YAML.\");\n        }\n      })\n      .catch(error => setErrorMessage(error.message));\n    fetch(process.env.PUBLIC_URL + '../unit-conversions.yaml')\n      .then(response => response.text())\n      .then(data => setUnitConversions(YAML.parse(data)));\n  }, [recipeName]);\n\n  return (\n    errorMessage ? (\n      <Alert variant='danger'>Could not find recipe for '{recipeName}'</Alert>\n    ) : recipe && unitConversions ? (\n      <div>\n        <Card.Title as=\"h1\">\n          {recipe.title}\n          <ButtonGroup toggle>\n            <ToggleButton\n              type='radio' value={useMetricUnits.toString()}\n              checked={useMetricUnits} onChange={() => setUseMetricUnits(true)}\n            >\n              Metric\n            </ToggleButton>\n            <ToggleButton\n              type='radio' value={(!useMetricUnits).toString()}\n              checked={!useMetricUnits} onChange={() => setUseMetricUnits(false)}\n            >\n              Imperial\n            </ToggleButton>\n          </ButtonGroup>\n        </Card.Title>\n        <Card.Text>{recipe.description}</Card.Text>\n        <Card.Header as=\"h2\">Ingredients</Card.Header>\n        {/* TODO: Set max width. */}\n        <Card.Body>\n          <ListGroup>\n            {recipe.ingredients.map((ingredient: IngredientType, index: number) =>\n              <ListGroup.Item key={index}>\n                <Ingredient ingredient={ingredient}\n                            unitConversions={unitConversions}\n                            useMetricUnits={useMetricUnits} />\n              </ListGroup.Item>\n              )}\n          </ListGroup>\n        </Card.Body>\n        <Card.Header as=\"h2\">Directions</Card.Header>\n        {/* TODO: Set max width. */}\n        <Card.Body>\n          <ol>\n            {recipe.directions.map((step: string, index: number) =>\n              <li key={index}>{step}</li>\n            )}\n          </ol>\n        </Card.Body>\n      </div>\n    ) : <Loading />\n  );\n};\n\nconst Home: React.FC = () => {\n  const [recipeList, setRecipeList] = useState<string[]>();\n\n  useEffect(() => {\n    fetch(process.env.PUBLIC_URL + 'recipe-list.yaml')\n      .then(response => response.text())\n      .then(data => setRecipeList(YAML.parse(data)));\n  }, []);\n\n  // TODO: Handle different categories.\n  return recipeList ? (\n    <div>\n      <Card.Title>Recipe List</Card.Title>\n      <ListGroup>\n        {recipeList.map((recipeName: string, index: number) =>\n          <ListGroup.Item key={index}>\n            <Link to={`/recipe/${recipeName}`}>{recipeName}</Link>\n          </ListGroup.Item>\n        )}\n      </ListGroup>\n    </div>\n  ) : <Loading />;\n};\n\nconst About: React.FC = () => {\n  return (\n    <div>\n      <Card.Title>About</Card.Title>\n      <Card.Link href=\"https://github.com/ellishg/laughing-potato\">\n        github.com/ellishg/laughing-potato\n      </Card.Link>\n      <Card.Text>\n        This is a simple collection of recipes that are easy to read. If you would like to add your own recipe, please make a pull request at <a href=\"https://github.com/ellishg/urban-bassoon\">github.com/ellishg/urban-bassoon</a>.\n      </Card.Text>\n      <Card.Text>\n        Thanks!\n      </Card.Text>\n    </div>\n  );\n};\n\nconst BadURL: React.FC = () => {\n  return (\n    <Alert variant='danger'>Invalid URL.</Alert>\n  );\n};\n\nconst Loading: React.FC = () => {\n  // TODO: Center spinner.\n  return (\n    <Spinner animation=\"border\" role=\"status\">\n      <span className=\"sr-only\">Loading...</span>\n    </Spinner>\n  );\n};\n\nconst App: React.FC = () => {\n  return (\n    <BrowserRouter>\n      <Card>\n        <Card.Header>\n          <Nav variant='tabs' defaultActiveKey=\"/\">\n            <Nav.Item>\n              <Nav.Link as={Link} to='/'>Home</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link as={Link} to='/about'>About</Nav.Link>\n            </Nav.Item>\n          </Nav>\n        </Card.Header>\n        <Card.Body>\n          <Switch>\n            <Route path='/' exact component={Home} />\n            <Route path='/about' exact component={About} />\n            <Route path='/recipe/:recipeName' exact component={(props: any) =>\n              <Recipe recipeName={props.match.params.recipeName} />\n            } />\n            <Route component={BadURL} />\n          </Switch>\n        </Card.Body>\n      </Card>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}