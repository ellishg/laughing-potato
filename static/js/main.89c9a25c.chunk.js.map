{"version":3,"sources":["About.tsx","Loading.tsx","Recipe.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["About","Card","Title","Link","href","Text","Loading","Spinner","animation","role","className","toNearestFraction","x","whole","Math","trunc","part","fraction","Recipe","recipeName","useState","recipe","setRecipe","localStorage","getItem","toString","useMetricUnits","setUseMetricUnits","errorMessage","setErrorMessage","useEffect","setItem","fetch","process","then","response","text","data","JSON","parse","catch","error","message","Alert","variant","as","title","ButtonGroup","toggle","ToggleButton","type","value","checked","onChange","description","images","map","path","index","Image","src","rounded","style","width","key","Header","Body","ListGroup","ingredients","ingredient","Item","unitConversions","require","unitToAbbreviation","Map","unit","amount","name","cups","grams","get","ingredientAmountToString","directions","step","Home","recipeList","setRecipeList","recipeItem","to","filename","BadURL","App","Nav","defaultActiveKey","exact","component","props","match","params","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.89c9a25c.chunk.js","sourcesContent":["import React from 'react';\nimport { Card } from 'react-bootstrap';\n\nconst About: React.FC = () => {\n  return (\n    <div>\n      <Card.Title>About</Card.Title>\n      <Card.Link href=\"https://github.com/ellishg/laughing-potato\">\n        github.com/ellishg/laughing-potato\n      </Card.Link>\n      <Card.Text>\n        This is a simple collection of recipes that are easy to read. If you would like to add your own recipe, please make a pull request at <a href=\"https://github.com/ellishg/urban-bassoon\">github.com/ellishg/urban-bassoon</a>.\n      </Card.Text>\n    </div>\n  );\n};\n\nexport default About","import React from 'react';\nimport { Spinner } from 'react-bootstrap';\n\nconst Loading: React.FC = () => {\n  // TODO: Center spinner.\n  return (\n    <Spinner animation=\"border\" role=\"status\">\n      <span className=\"sr-only\">Loading...</span>\n    </Spinner>\n  );\n};\n\nexport default Loading;","import React, { useEffect, useState } from 'react';\nimport { Alert, ButtonGroup, Card, Image, ListGroup, ToggleButton } from 'react-bootstrap';\nimport Loading from './Loading';\n\nconst toNearestFraction = (x: number) => {\n  const epsilon = 0.001;\n  const whole = Math.trunc(x + epsilon);\n  const part = x - whole;\n  const fraction = (part < (1 / 8) / 2) ? null\n    : (part < 1 / 8 + (1 / 4 - 1 / 8) / 2) ? '1/8'\n      : (part < 1 / 4 + (1 / 3 - 1 / 4) / 2) ? '1/4'\n        : (part < 1 / 3 + (3 / 8 - 1 / 3) / 2) ? '1/3'\n          : (part < 3 / 8 + (1 / 2 - 3 / 8) / 2) ? '3/8'\n            : (part < 1 / 2 + (5 / 8 - 1 / 2) / 2) ? '1/2'\n              : (part < 5 / 8 + (2 / 3 - 5 / 8) / 2) ? '5/8'\n                : (part < 2 / 3 + (3 / 4 - 2 / 3) / 2) ? '2/3'\n                  : (part < 3 / 4 + (7 / 8 - 3 / 4) / 2) ? '3/4'\n                    : '7/8';\n  return whole === 0 ? (fraction ? fraction : '0')\n    : `${whole}` + (fraction ? ` ${fraction}` : '');\n};\n\nconst ingredientAmountToString = (ingredient: any, useMetricUnits: boolean) => {\n  const unitConversions = require('./unit-conversions');\n  const unitToAbbreviation: Map<string, string> = new Map([\n    ['grams', 'g'],\n    ['tablespoons', 'tbsp.'],\n    ['teaspoons', 'tsp.'],\n    ['ounces', 'oz'],\n  ]);\n\n  if (!ingredient.unit) {\n    return toNearestFraction(ingredient.amount);\n  } else {\n    var amount = ingredient.amount;\n    var unit = ingredient.unit;\n    if (ingredient.name in unitConversions) {\n      const { cups, grams } = unitConversions[ingredient.name];\n      if (useMetricUnits && unit === 'cups') {\n        amount = amount * grams / cups;\n        unit = 'grams';\n      } else if (!useMetricUnits && unit === 'grams') {\n        amount = amount * cups / grams;\n        unit = 'cups';\n      }\n    }\n    return `${toNearestFraction(amount)} ${unitToAbbreviation.get(unit) || unit}`;\n  }\n}\n\nconst Recipe: React.FC<{recipeName: string}> = ({recipeName}) => {\n  const [recipe, setRecipe] = useState<any>();\n  const [useMetricUnits, setUseMetricUnits] = useState<boolean>(() =>\n    localStorage.getItem('useMetricUnit') === true.toString()\n  );\n  const [errorMessage, setErrorMessage] = useState<string>();\n\n  useEffect(() => {\n    if (!(localStorage.getItem('useMetricUnit') === useMetricUnits.toString())) {\n      localStorage.setItem('useMetricUnit', useMetricUnits.toString());\n    }\n  }, [useMetricUnits]);\n\n  useEffect(() => {\n    fetch(process.env.PUBLIC_URL + '/recipe-data/' + recipeName + '.json')\n      .then(response => response.text())\n      .then(data => setRecipe(JSON.parse(data)))\n      .catch(error => setErrorMessage(error.message));\n  }, [recipeName]);\n\n  return (\n    errorMessage ? (\n      <Alert variant='danger'>Could not find recipe for '{recipeName}'</Alert>\n    ) : recipe ? (\n      <div>\n        <Card.Title as=\"h1\">\n          {recipe.title}\n          <ButtonGroup toggle>\n            <ToggleButton\n              type='radio' value={useMetricUnits.toString()}\n              checked={useMetricUnits} onChange={() => setUseMetricUnits(true)}\n            >\n              Metric\n            </ToggleButton>\n            <ToggleButton\n              type='radio' value={(!useMetricUnits).toString()}\n              checked={!useMetricUnits} onChange={() => setUseMetricUnits(false)}\n            >\n              Imperial\n            </ToggleButton>\n          </ButtonGroup>\n        </Card.Title>\n        <Card.Text>{recipe.description}</Card.Text>\n\n        {/* TODO: Use better style, click to enlarge. */}\n        {recipe.images.map((path: string, index: number) =>\n          <Image\n            src={process.env.PUBLIC_URL + '/' + path}\n            rounded style={{ width: '8rem' }}\n            key={index}\n          />\n        )}\n\n        <Card.Header as=\"h2\">Ingredients</Card.Header>\n        {/* TODO: Set max width. */}\n        <Card.Body>\n          <ListGroup>\n            {recipe.ingredients.map((ingredient: any, index: number) =>\n              <ListGroup.Item key={index}>\n                {ingredientAmountToString(ingredient, useMetricUnits)} {ingredient.name}\n              </ListGroup.Item>\n              )}\n          </ListGroup>\n        </Card.Body>\n        <Card.Header as=\"h2\">Directions</Card.Header>\n        {/* TODO: Set max width. */}\n        <Card.Body>\n          <ol>\n            {recipe.directions.map((step: string, index: number) =>\n              <li key={index}>{step}</li>\n            )}\n          </ol>\n        </Card.Body>\n      </div>\n    ) : <Loading />\n  );\n};\n\nexport default Recipe;","import React, { useEffect, useState } from 'react';\nimport { Alert, Card, ListGroup, Nav } from 'react-bootstrap';\nimport { BrowserRouter, Link, Route, Switch } from 'react-router-dom';\nimport About from './About';\nimport Loading from './Loading';\nimport Recipe from './Recipe';\n\nconst Home: React.FC = () => {\n  const [recipeList, setRecipeList] = useState<any[]>();\n\n  useEffect(() => {\n    fetch(process.env.PUBLIC_URL + '/recipe-data/recipe-list.json')\n      .then(response => response.text())\n      .then(data => setRecipeList(JSON.parse(data)));\n  }, []);\n\n  // TODO: Handle different categories.\n  // TODO: Add search bar to filter by tags using a fuzzy search.\n  return recipeList ? (\n    <div>\n      <Card.Title>Recipe List</Card.Title>\n      <ListGroup>\n        {recipeList.map((recipeItem: any, index: number) =>\n          <ListGroup.Item key={index}>\n            <Link to={process.env.PUBLIC_URL + '/recipe/' + recipeItem.filename}>\n              {recipeItem.title}\n            </Link>\n          </ListGroup.Item>\n        )}\n      </ListGroup>\n    </div>\n  ) : <Loading />;\n};\n\nconst BadURL: React.FC = () => {\n  return (\n    <Alert variant='danger'>Invalid URL.</Alert>\n  );\n};\n\nconst App: React.FC = () => {\n  return (\n    <BrowserRouter>\n      <Card>\n        <Card.Header>\n          <Nav variant='tabs' defaultActiveKey=\"/\">\n            <Nav.Item>\n              <Nav.Link as={Link} to={process.env.PUBLIC_URL + '/'}>Home</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link as={Link} to={process.env.PUBLIC_URL + '/about'}>About</Nav.Link>\n            </Nav.Item>\n          </Nav>\n        </Card.Header>\n        <Card.Body>\n          <Switch>\n            <Route path={process.env.PUBLIC_URL + '/'} exact component={Home} />\n            <Route path={process.env.PUBLIC_URL + '/about'} exact component={About} />\n            <Route path={process.env.PUBLIC_URL + '/recipe/:recipeName'} exact component={(props: any) =>\n              <Recipe recipeName={props.match.params.recipeName} />\n            } />\n            <Route component={BadURL} />\n          </Switch>\n        </Card.Body>\n      </Card>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}