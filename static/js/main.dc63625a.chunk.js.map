{"version":3,"sources":["About.tsx","Loading.tsx","Recipe.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["About","Card","Title","Link","href","Text","Loading","Spinner","animation","role","className","toNearestFraction","x","whole","Math","trunc","part","fraction","Recipe","recipeName","useState","recipe","setRecipe","localStorage","getItem","toString","useMetricUnits","setUseMetricUnits","errorMessage","setErrorMessage","useEffect","setItem","fetch","process","then","response","text","data","JSON","parse","catch","error","message","Alert","variant","as","title","ButtonGroup","toggle","ToggleButton","type","value","checked","onChange","description","images","map","path","index","Image","src","rounded","style","width","key","Header","Body","ListGroup","ingredients","ingredient","Item","unitConversions","require","unitToAbbreviation","Map","unit","amount","name","cups","grams","get","ingredientAmountToString","directions","step","Home","recipeList","setRecipeList","filteredRecipeIndices","setFilteredRecipeIndices","searchBarText","setSearchBarText","fuzzyRecipeTags","setFuzzyRecipeTags","tagToRecipeIndices","setTagToRecipeIndices","recipeTags","tags","concat","reduce","bucket","recipeIndex","forEach","tag","set","FuzzySet","flat","indices","flatMap","reverse","filter","arrayIndex","array","lastIndexOf","_","Form","onSubmit","event","preventDefault","Group","Control","placeholder","target","to","filename","BadURL","getRecipe","props","match","params","App","Nav","defaultActiveKey","exact","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.dc63625a.chunk.js","sourcesContent":["import React from 'react'\nimport { Card } from 'react-bootstrap'\n\nconst About: React.FC = () => {\n  return (\n    <div>\n      <Card.Title>About</Card.Title>\n      <Card.Link href=\"https://github.com/ellishg/laughing-potato\">\n        github.com/ellishg/laughing-potato\n      </Card.Link>\n      <Card.Text>\n        This is a simple collection of recipes that are easy to read. If you would like to add your\n        own recipe, please make a pull request at{' '}\n        <a href=\"https://github.com/ellishg/urban-bassoon\">github.com/ellishg/urban-bassoon</a>.\n      </Card.Text>\n    </div>\n  )\n}\n\nexport default About\n","import React from 'react'\nimport { Spinner } from 'react-bootstrap'\n\nconst Loading: React.FC = () => {\n  // TODO: Center spinner.\n  return (\n    <Spinner animation=\"border\" role=\"status\">\n      <span className=\"sr-only\">Loading...</span>\n    </Spinner>\n  )\n}\n\nexport default Loading\n","import React, { useEffect, useState } from 'react'\nimport { Alert, ButtonGroup, Card, Image, ListGroup, ToggleButton } from 'react-bootstrap'\nimport Loading from './Loading'\n\nconst toNearestFraction = (x: number) => {\n  const epsilon = 0.001\n  const whole = Math.trunc(x + epsilon)\n  const part = x - whole\n  const fraction =\n    part < 1 / 8 / 2\n      ? null\n      : part < 1 / 8 + (1 / 4 - 1 / 8) / 2\n      ? '1/8'\n      : part < 1 / 4 + (1 / 3 - 1 / 4) / 2\n      ? '1/4'\n      : part < 1 / 3 + (3 / 8 - 1 / 3) / 2\n      ? '1/3'\n      : part < 3 / 8 + (1 / 2 - 3 / 8) / 2\n      ? '3/8'\n      : part < 1 / 2 + (5 / 8 - 1 / 2) / 2\n      ? '1/2'\n      : part < 5 / 8 + (2 / 3 - 5 / 8) / 2\n      ? '5/8'\n      : part < 2 / 3 + (3 / 4 - 2 / 3) / 2\n      ? '2/3'\n      : part < 3 / 4 + (7 / 8 - 3 / 4) / 2\n      ? '3/4'\n      : '7/8'\n  return whole === 0 ? (fraction ? fraction : '0') : `${whole}` + (fraction ? ` ${fraction}` : '')\n}\n\nconst ingredientAmountToString = (ingredient: any, useMetricUnits: boolean) => {\n  const unitConversions = require('./unit-conversions')\n  const unitToAbbreviation: Map<string, string> = new Map([\n    ['grams', 'g'],\n    ['tablespoons', 'tbsp.'],\n    ['teaspoons', 'tsp.'],\n    ['ounces', 'oz'],\n  ])\n\n  if (!ingredient.unit) {\n    return toNearestFraction(ingredient.amount)\n  } else {\n    let amount = ingredient.amount\n    let unit = ingredient.unit\n    if (ingredient.name in unitConversions) {\n      const { cups, grams } = unitConversions[ingredient.name]\n      if (useMetricUnits && unit === 'cups') {\n        amount = (amount * grams) / cups\n        unit = 'grams'\n      } else if (!useMetricUnits && unit === 'grams') {\n        amount = (amount * cups) / grams\n        unit = 'cups'\n      }\n    }\n    return `${toNearestFraction(amount)} ${unitToAbbreviation.get(unit) || unit}`\n  }\n}\n\nconst Recipe: React.FC<{ recipeName: string }> = ({ recipeName }) => {\n  const [recipe, setRecipe] = useState<any>()\n  const [useMetricUnits, setUseMetricUnits] = useState<boolean>(\n    () => localStorage.getItem('useMetricUnit') === true.toString()\n  )\n  const setMetric = () => setUseMetricUnits(true)\n  const setImperial = () => setUseMetricUnits(false)\n  const [errorMessage, setErrorMessage] = useState<string>()\n\n  useEffect(() => {\n    if (!(localStorage.getItem('useMetricUnit') === useMetricUnits.toString())) {\n      localStorage.setItem('useMetricUnit', useMetricUnits.toString())\n    }\n  }, [useMetricUnits])\n\n  useEffect(() => {\n    fetch(process.env.PUBLIC_URL + '/recipe-data/' + recipeName + '.json')\n      .then((response) => response.text())\n      .then((data) => setRecipe(JSON.parse(data)))\n      .catch((error) => setErrorMessage(error.message))\n  }, [recipeName])\n\n  return errorMessage ? (\n    <Alert variant=\"danger\">Could not find recipe for '{recipeName}'</Alert>\n  ) : recipe ? (\n    <div>\n      <Card.Title as=\"h1\">\n        {recipe.title}\n        <ButtonGroup toggle={true}>\n          <ToggleButton\n            type=\"radio\"\n            value={useMetricUnits.toString()}\n            checked={useMetricUnits}\n            onChange={setMetric}\n          >\n            Metric\n          </ToggleButton>\n          <ToggleButton\n            type=\"radio\"\n            value={(!useMetricUnits).toString()}\n            checked={!useMetricUnits}\n            onChange={setImperial}\n          >\n            Imperial\n          </ToggleButton>\n        </ButtonGroup>\n      </Card.Title>\n      <Card.Text>{recipe.description}</Card.Text>\n\n      {/* TODO: Use better style, click to enlarge. */}\n      {recipe.images.map((path: string, index: number) => (\n        <Image\n          src={process.env.PUBLIC_URL + '/' + path}\n          rounded={true}\n          style={{ width: '8rem' }}\n          key={index}\n        />\n      ))}\n\n      <Card.Header as=\"h2\">Ingredients</Card.Header>\n      {/* TODO: Set max width. */}\n      <Card.Body>\n        <ListGroup>\n          {recipe.ingredients.map((ingredient: any, index: number) => (\n            <ListGroup.Item key={index}>\n              {ingredientAmountToString(ingredient, useMetricUnits)} {ingredient.name}\n            </ListGroup.Item>\n          ))}\n        </ListGroup>\n      </Card.Body>\n      <Card.Header as=\"h2\">Directions</Card.Header>\n      {/* TODO: Set max width. */}\n      <Card.Body>\n        <ol>\n          {recipe.directions.map((step: string, index: number) => (\n            <li key={index}>{step}</li>\n          ))}\n        </ol>\n      </Card.Body>\n    </div>\n  ) : (\n    <Loading />\n  )\n}\n\nexport default Recipe\n","import React, { useEffect, useState } from 'react'\nimport { Alert, Card, ListGroup, Nav, Form } from 'react-bootstrap'\nimport { BrowserRouter, Link, Route, Switch } from 'react-router-dom'\nimport About from './About'\nimport Loading from './Loading'\nimport Recipe from './Recipe'\nimport FuzzySet from 'fuzzyset'\n\nconst Home: React.FC = () => {\n  const [recipeList, setRecipeList] = useState<any[]>()\n  const [filteredRecipeIndices, setFilteredRecipeIndices] = useState<number[]>()\n  const [searchBarText, setSearchBarText] = useState<string>('')\n  const [fuzzyRecipeTags, setFuzzyRecipeTags] = useState<FuzzySet>()\n  const [tagToRecipeIndices, setTagToRecipeIndices] = useState<Map<string, number[]>>()\n\n  useEffect(() => {\n    fetch(process.env.PUBLIC_URL + '/recipe-data/recipe-list.json')\n      .then((response) => response.text())\n      .then((data) => setRecipeList(JSON.parse(data)))\n  }, [])\n\n  useEffect(() => {\n    if (recipeList) {\n      const recipeTags = recipeList.map((recipe: any) => recipe.tags.concat([recipe.title]))\n      setTagToRecipeIndices(\n        recipeTags.reduce((bucket: Map<string, number[]>, tags: string[], recipeIndex: number) => {\n          tags.forEach((tag: string) =>\n            bucket.set(tag, bucket.get(tag)?.concat([recipeIndex]) || [recipeIndex])\n          )\n          return bucket\n        }, new Map())\n      )\n      setFuzzyRecipeTags(FuzzySet(recipeTags.flat()))\n    }\n  }, [recipeList])\n\n  useEffect(() => {\n    if (searchBarText) {\n      const matchingTags =\n        fuzzyRecipeTags?.get(searchBarText)?.flatMap(([_, tag]: [number, string]) => tag) || []\n      const indices = matchingTags\n        .flatMap((tag: string) => tagToRecipeIndices?.get(tag) || [])\n        // Remove duplicates, but preserve order.\n        .reverse()\n        .filter(\n          (recipeIndex: number, arrayIndex: number, array: number[]) =>\n            array.lastIndexOf(recipeIndex) === arrayIndex\n        )\n        .reverse()\n      setFilteredRecipeIndices(indices)\n    } else {\n      setFilteredRecipeIndices(recipeList?.map((_: any, index: number) => index) || [])\n    }\n  }, [recipeList, searchBarText, fuzzyRecipeTags, tagToRecipeIndices])\n\n  const handleSearchBarChange = (event: any) => {\n    event.preventDefault()\n    setSearchBarText(event.target.value)\n  }\n\n  const handleSearchBarSubmit = (event: any) => {\n    event.preventDefault()\n  }\n\n  // TODO: Handle different categories.\n  return filteredRecipeIndices ? (\n    <div>\n      <Card.Title>Recipe List</Card.Title>\n\n      <Form onSubmit={handleSearchBarSubmit}>\n        <Form.Group>\n          <Form.Control placeholder={'Search for a recipe!'} onChange={handleSearchBarChange} />\n        </Form.Group>\n      </Form>\n\n      <ListGroup>\n        {filteredRecipeIndices.map((index: number) => (\n          <ListGroup.Item key={index}>\n            <Link to={process.env.PUBLIC_URL + '/recipe/' + recipeList![index].filename}>\n              {recipeList![index].title}\n            </Link>\n          </ListGroup.Item>\n        ))}\n      </ListGroup>\n    </div>\n  ) : (\n    <Loading />\n  )\n}\n\nconst BadURL: React.FC = () => {\n  return <Alert variant=\"danger\">Invalid URL.</Alert>\n}\n\nconst getRecipe = (props: any) => <Recipe recipeName={props.match.params.recipeName} />\n\nconst App: React.FC = () => {\n  return (\n    <BrowserRouter>\n      <Card>\n        <Card.Header>\n          <Nav variant=\"tabs\" defaultActiveKey=\"/\">\n            <Nav.Item>\n              <Nav.Link as={Link} to={process.env.PUBLIC_URL + '/'}>\n                Home\n              </Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link as={Link} to={process.env.PUBLIC_URL + '/about'}>\n                About\n              </Nav.Link>\n            </Nav.Item>\n          </Nav>\n        </Card.Header>\n        <Card.Body>\n          <Switch>\n            <Route path={process.env.PUBLIC_URL + '/'} exact={true} component={Home} />\n            <Route path={process.env.PUBLIC_URL + '/about'} exact={true} component={About} />\n            <Route\n              path={process.env.PUBLIC_URL + '/recipe/:recipeName'}\n              exact={true}\n              component={getRecipe}\n            />\n            <Route component={BadURL} />\n          </Switch>\n        </Card.Body>\n      </Card>\n    </BrowserRouter>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}